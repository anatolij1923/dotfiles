#!/usr/bin/env bash

# --- Конфигурация ---
# Директория для сохранения записей.
VIDEO_DIR="$(xdg-user-dir VIDEOS)/Запись экрана"
# Название файла (с меткой времени для уникальности)
# Используем формат ГГГГ-ММ-ДД_ЧЧ-ММ-СС.mp4 для читаемости
FILENAME="$(date +'%Y-%m-%d_%H-%M-%S.mp4')"
FILEPATH="$VIDEO_DIR/$FILENAME"

# --- Конец Конфигурации ---

# Создать директорию, если она не существует
mkdir -p "$VIDEO_DIR"

# Функция для вывода справки
usage() {
    echo "Использование: $(basename "$0") [area] [--audio]"
    echo ""
    echo "Переключает запись экрана с помощью wf-recorder."
    echo "Если запись не запущена, начинает ее."
    echo "Если запущена, останавливает."
    echo ""
    echo "Аргументы:"
    echo "  area               Записать выбранную область с помощью slurp."
    echo "  --audio            Включить запись аудио вместе с видео."
    echo "  --help             Показать эту справку."
    echo ""
    echo "Записи сохраняются в: $VIDEO_DIR"
}

# --- Основная логика скрипта ---

# Проверяем, запущен ли уже wf-recorder
if pgrep -x wf-recorder > /dev/null; then
    # Если запущен, останавливаем его
    pkill -INT wf-recorder # Используем INT для более мягкого завершения
    notify-send "Запись экрана" "Запись остановлена"
    exit 0
fi

# --- Если запись не запущена, начинаем новую ---

GEOMETRY=""       # Переменная для хранения геометрии области
INCLUDE_AUDIO="false" # Переменная для включения аудио

# Разбираем аргументы командной строки
# Сначала проверяем первый аргумент на команду 'area' или '--help'
case "$1" in
    area)
        echo "Выберите область с помощью slurp..."
        # Вызываем slurp для выбора области и сохраняем результат в GEOMETRY
        GEOMETRY=$(slurp)
        # Проверяем, был ли выбор отменен (slurp вернет пустую строку)
        if [[ -z "$GEOMETRY" ]]; then
            notify-send "Запись экрана" "Выбор области отменен"
            exit 1
        fi
        echo "Выбрана геометрия: $GEOMETRY"
        shift # Сдвигаем аргументы, чтобы обработать остальные опции
        ;;
    --help|-h)
        usage
        exit 0
        ;;
    *)
        # Если первый аргумент не 'area' и не '--help', то записываем весь экран.
        # Аргументы будут разобраны дальше как опции.
        ;;
esac

# Теперь разбираем оставшиеся аргументы как опции
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        --audio)
            INCLUDE_AUDIO="true"
            ;;
        *)
            # Неизвестный аргумент/опция
            echo "Ошибка: Неизвестный аргумент или опция '$1'" >&2
            usage
            exit 1
            ;;
    esac
    shift # Переходим к следующему аргументу
done

# Собираем команду для запуска wf-recorder
cmd=(wf-recorder)
cmd+=("-f" "$FILEPATH") # Указываем выходной файл

# Добавляем геометрию, если была выбрана область
if [[ -n "$GEOMETRY" ]]; then
    cmd+=("-g" "$GEOMETRY")
fi

# Добавляем опцию аудио, если запрошено
if [[ "$INCLUDE_AUDIO" == "true" ]]; then
    cmd+=("--audio")
    # wf-recorder по умолчанию выберет аудио устройство PulseAudio.
    # Если нужно конкретное, можно добавить опцию "-a=<имя_устройства>" сюда.
    # Например: cmd+=("-a=alsa_output.pci-0000_08_00.6.analog-stereo.monitor")
fi

# Добавляем опцию перезаписи файла без запроса, если файл уже существует (опционально, но может быть полезно)
# cmd+=("-y")

# TODO: Если нужно указать конкретный кодек, добавьте опцию -c codec_name сюда
# Например: cmd+=("-c" "libx264")

# Запускаем wf-recorder в фоне и отсоединяем от терминала
echo "Начало записи..."
echo "Команда: ${cmd[*]}" # Выводим команду для отладки
"${cmd[@]}" & disown # Запуск в фоне и отсоединение

# Отправляем уведомление о начале записи
# Даем wf-recorder немного времени на старт, чтобы убедиться, что процесс запущен
sleep 0.5
if pgrep -x wf-recorder > /dev/null; then
    notify-send "Запись экрана" "Начата запись: $FILEPATH"
else
    notify-send "Запись экрана" "Ошибка запуска wf-recorder"
    echo "Ошибка: wf-recorder не удалось запустить." >&2
    exit 1
fi
