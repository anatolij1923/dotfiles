import qs.services
import qs
import QtQuick
import Quickshell
import Quickshell.Widgets
import Qt5Compat.GraphicalEffects

// From https://github.com/caelestia-dots/shell 
// License: GPLv3

MouseArea {
    id: root

    property bool disabled
    property color color: Colors.on_surface
    property real radius: parent?.radius ?? 0
    property alias rect: hoverLayer

    signal rightClicked
    signal middleClicked

    function onClicked(): void {
    }

    anchors.fill: parent

    enabled: !disabled
    cursorShape: disabled ? undefined : Qt.PointingHandCursor
    hoverEnabled: true
    acceptedButtons: Qt.LeftButton | Qt.RightButton | Qt.MiddleButton

    onPressed: event => {
        if (disabled)
            return;

        if (event.button === Qt.LeftButton) {
            rippleAnim.x = event.x;
            rippleAnim.y = event.y;

            const dist = (ox, oy) => ox * ox + oy * oy;
            rippleAnim.radius = Math.sqrt(Math.max(dist(event.x, event.y), dist(event.x, height - event.y), dist(width - event.x, event.y), dist(width - event.x, height - event.y)));

            rippleAnim.restart();
        } else if (event.button === Qt.RightButton) {
            rightClicked();
        } else if (event.button === Qt.MiddleButton) {
            middleClicked();
        }
    }

    onClicked: event => {
        if (!disabled && event.button === Qt.LeftButton) {
            onClicked(event);
        }
    }

    SequentialAnimation {
        id: rippleAnim

        property real x
        property real y
        property real radius

        PropertyAction {
            target: ripple
            property: "x"
            value: rippleAnim.x
        }
        PropertyAction {
            target: ripple
            property: "y"
            value: rippleAnim.y
        }
        PropertyAction {
            target: ripple
            property: "opacity"
            value: 0.08
        }
        Anim {
            target: ripple
            properties: "implicitWidth,implicitHeight"
            from: 0
            to: rippleAnim.radius * 2
            easing.bezierCurve: Appearance.animCurves.standardDecel
        }
        Anim {
            target: ripple
            property: "opacity"
            to: 0
        }
    }

    ClippingRectangle {
        id: hoverLayer

        anchors.fill: parent

        color: Qt.alpha(root.color, root.disabled ? 0 : root.pressed ? 0.1 : root.containsMouse ? 0.08 : 0)
        radius: root.radius

        Rectangle {
            id: ripple

            radius: Appearance.rounding.full
            color: root.color
            opacity: 0

            transform: Translate {
                x: -ripple.width / 2
                y: -ripple.height / 2
            }
        }
    }
}
